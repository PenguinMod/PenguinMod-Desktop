name: Release

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  release:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
    - uses: actions/checkout@v2
    - name: Install Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 14.x
        cache: npm
    - name: Install Dependencies
      run: npm ci
    - name: Download Library Files
      run: npm run fetch

    - name: Compile
      run: npm run compile
      env:
        NODE_OPTIONS: --max-old-space-size=4096
        TW_ENABLE_UPDATE_CHECKER: "1"

    - name: Package Windows
      if: runner.os == 'Windows'
      run: |
        npx electron-builder --windows nsis --x64 --publish always
        npx electron-builder --windows nsis --ia32 --publish always
        npx electron-builder --windows nsis --arm64 --publish always
        npx electron-builder --windows portable --x64 --publish always
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Package macOS
      if: runner.os == 'macOS'
      run: |
        npx electron-builder --mac dmg --universal --publish always
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Package Linux
      if: runner.os == 'Linux'
      run: |
        npx electron-builder --linux deb --x64 --publish always
        npx electron-builder --linux deb --arm64 --publish always
        npx electron-builder --linux deb --armv7l --publish always
        npx electron-builder --linux tar.gz --x64 --publish always
        npx electron-builder --linux tar.gz --arm64 --publish always
        npx electron-builder --linux tar.gz --armv7l --publish always
        npx electron-builder --linux AppImage --x64 --publish always
        npx electron-builder --linux AppImage --arm64 --publish always
        npx electron-builder --linux AppImage --armv7l --publish always
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
